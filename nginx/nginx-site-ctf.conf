#
# This file is an example nginx configuration snippet for the structure
# used by Debian-based distributions (eg. the package shipped with Ubuntu).
# We also suggest you modify the default "/etc/nginx.conf" to ensure
# "server_tokens off" and perhaps also "use epoll" (in the "events" block).
#
# Name this file "/etc/nginx/sites-available/ctf". Then remove the
# "/etc/nginx/sites-enabled/default" symlink and create a new one for
# this file. Restart nginx for the configuration to take effect.
#


# It's good practice to declare localhost as an
# upstream to avoid it being resolved using DNS...
upstream localhost {
        server 127.0.0.1;
}

# Instead of Google, you can use a local caching
# resolver instead (eg. Unbound), if available...
resolver 8.8.8.8 ipv6=off;

root /srv/ctf;
log_not_found off;

# Default throttling to prevent brute-force. This can be overriden
# with higher limits for challenges that need brute-forcing...
limit_req_zone $binary_remote_addr zone=generic:10m rate=30r/s;
limit_req zone=generic burst=10 nodelay;
limit_req_status 429;


#
# File-based Challenges
#
server {
    listen 80 default_server;
    listen [::]:80 default_server;

    server_name _;

    # Place files in randomly named sub-directories...
    location /static/ {
        alias /srv/ctf/static/;
    }
}


#
# Challenge: "WebHacking/100-Rolodex"
#
server {
    listen 80;
    listen [::]:80;

    # Use a random vhost (CNAME) to prevent teams from finding
    # challenges before opening them in the game dashboard...
    server_name w100-329074e6b126304d.ctf.pixels.camp;

    location ~ ^/(?:token|users(?:/[0-9]+)?)$ {
        proxy_pass http://localhost:30878;
        proxy_redirect default;
    }
}


# vim: set expandtab ts=4 sw=4 ft=conf:
